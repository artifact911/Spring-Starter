@Resource - имеет схожий смысл работы с @Autowired, но не может быть использована над
        конструктором - а нам хочется, т.к. хотим уйти от xml и не уразывать в нем параметры для конструктора.
        Но реализовывать эту аннтошку Спринг обязан, т.к. соблюдает JavaEE спецификацию JSR-250.

Но это не единственное отличие: Например создадим еще один бин (ConnectionPool) в xml. Теперь у нас будет
    два бина ConnectionPool и Спринг не будет знать, какой создавать - упадет исключение - мы ожидаем получить
    какой-то бин, а их оказалось несколько. Следовательно нам нужно как-то указать какой бин мы просим:
    @Resource - указав имя бина в xml:
        @Resource(name = "pool1")
        private ConnectionPool connectionPool;

    @Autowired - не принимает таких параметров. У него есть true/false - фейлить приложение или нет, если у нас
        возникнет такая ситуация. Но есть @Qualifier - вот в нем мы можен написать название бина, который хотим получить.
        @Autowired
        @Qualifier("pool1")
        private ConnectionPool connectionPool;

    Но Спринг пошел еще дальше и можно не использовать @Qualifier, а указать именем поля название бина:
         @Autowired
         private ConnectionPool pool1;

    Также  @Autowired может инжектить коллекцию бинов - соберутся все бины такого типа и соберутся в эту коллекцию:
        @Autowired
        private List<ConnectionPool> pools;


    @Autowired - можно писать не над полем, а на сеттером. Но на вход сеттер принимает имя тьребуемого бина -
        не нужно так делать.

@Value - позволяет заинжектить какие-то поля и свойства и из пропертей в том числе:
     @Value("${db.pool.size}")
     private Integer poolSize;

     Так же эту анноташку, как и @Autowired можно заюзать:
        - над полем
        - над методом
        - параметром конструктора
        - над другой аннотацией

Все эти анноташки мы будем расставлять над конструкторами, т.к. мы хотим уйти от xml
