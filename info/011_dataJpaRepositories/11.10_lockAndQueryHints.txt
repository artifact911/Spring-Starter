@Lock - нужен, чтобы устанавливать оптимистические либо пессимистические блокировки на уровне строк.

    @Lock(LockModeType.NONE)
    List<User> findTop3ByBirthDateBefore(LocalDate birthDate, Sort sort);

    LockModeType:
        Из хибернейт-курса (9.3):
    !!! OptimisticLockType.DIRTY - не надо юзать. Подводные камни. Лучше всего версионность

    Для решения наших проблем, оговоренных в уроках ранее, существуют
        - оптимистические блокировки - решаются с помощью Java-приложения
        - пессимистические блокировки - решаются с помощью СУБД

        LockModeType.xxx
            - NONE
            - READ - усталел и вместо него сработает OPTIMISTIC
            - WRITE - усталел и вместо него сработает OPTIMISTIC_FORCE_INCREMENT
            - OPTIMISTIC - Изменит в БД ТОЛЬКО тогда, когда мы что-то изменим
            - OPTIMISTIC_FORCE_INCREMENT - изменит в БД в ЛЮБОМ случае
            - PESSIMISTIC_READ
            - PESSIMISTIC_WRITE
            - PESSIMISTIC_FORCE_INCREMENT

    Optimistic:
        // OPTIMISTIC - решается на уровне приложения, поэтому его тут указывать необязательно
        session.find(Payment.class, 1L, LockModeType.OPTIMISTIC);

        Для этого идем в сущность и:

            @OptimisticLocking(type = OptimisticLockType.VERSION)
            public class Payment implements BaseEntity<Long>

        OptimisticLockType.xxx
            - VERSION - создаем поле, которое будет содержать версию нашей строчки.
                  @Version
                  private Long version;

                Теперь, когда мы создадим эту сущность, ее версия будет 0, как только изменим, станет 1 и т.д. И выполняя
                    запросы мы будем делать where еще и по версии.
                (создали новое поле, надо пересоздать таблицу)
                   <property name="hibernate.hbm2ddl.auto">create</property>

            - ALL - тут мы не используем поле версионности, а смотри на все поля в объекте. Представим, что мы сетаем одно
                поле (т.е. в select будет update на одно поле), но where для этого объекста будет включать ВСЕ поля. И если
                хоть одно было изменено от первоначального (другой транзакцией), то словим исключение.
                В классе выставляем необходимый локТайп + @DynamicUpdate - это потому что операция update динамическая и
                меняется.

                    @OptimisticLocking(type = OptimisticLockType.ALL)
                    @DynamicUpdate
                    public class Payment implements BaseEntity<Long>

                Иными словами хибернейт динамически понимает, что мы хотим сделать нащим SQL основываясь на
                аннотациях @Table, @Column и т.д. Он парсит эти аннотации и создает CRUD операции.

                Hibernate:
                    update
                        Payment
                    set
                        amount=?
                    where
                        id=?
                        and amount=?
                        and receiver_id=?

            - DIRTY - смотрит dirty-контекст и смотерть будет только на то, что изменилось
            - NONE

@QueryHints - дополнительные какие-то наши оптимизации, которые мы хотим добавить к нашему запросу. какие хинты есть
    можно посмотреть провалившись в QueryHints.class от Хибера.

    @QueryHints(@QueryHint(name = "org.hibernate.fetchSize", value = "50"))
    @Lock(LockModeType.NONE)
    List<User> findTop3ByBirthDateBefore(LocalDate birthDate, Sort sort);