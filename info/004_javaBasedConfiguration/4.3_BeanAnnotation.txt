@Bean - не стоит использовать эту аннотацию а классе не помеченном @Configuration
    Инжектить зависимости можно тремя способами:
        - в качестве параметра в метод
        - в качестве полей нашего ApplicationConfiguration.class - редко. Только если этот бин сипользуется сразу в
            нескольких методах @Bean
        - вызвав метод получения бина напрямую в этом же классе - и это будет работать только:
            @Configuration(proxyBeanMethods = true) - по-умолчанию
            т.к. мы должны просить бин у прокси-объекта над нашим конфиг-классом, что бы тот не создавал множество бинов,
            а отдавал нам единственный синглтон. Обращаясь к прокси, сколько раз мы не просим бин, вызовется метод и
            проинициализиуется он единожды.

    @Bean("pool2")
    public ConnectionPool pool2(@Value("${db.username}") String username) {
        return new ConnectionPool(username, 20);
     }
    По-умолчанию название бина возвращаемого этм методом будет именем метода. Но мы можем это изменить:
        @Bean("pool3")

    Так же, как и в любой класс мы можем инжектить сюда другие бины любым доступным способом, но все же чаще они
    передаются сюда в качестве параметров метода.

    инжект вызвав метод получения бина напрямую в этом же классе.
    @Bean
    public UserRepository userRepository3() {
        return new UserRepository(pool3());
    }